#!/usr/bin/perl -w
###############################################################################
=pod

=head1 NAME

mig-stage 

Load the SQL-converted version of the specified file into the migration schema.

Extra arguments are passed to the underlying call to psql

If the tracked file was previously staged with a different table, drop that
table.


=head1 SYNOPSIS

B<mig-stage> <file> [other arguments...]

=cut

###############################################################################

use strict;
use Switch;
use Env qw(
    HOME MYSQL_HOST MYSQL_TCP_PORT MYSQL_USER MYSQL_DATABASE MYSQL_PW
    MIGSCHEMA MIGBASEWORKDIR MIGBASEGITDIR MIGGITDIR MIGWORKDIR
);
use Pod::Usage;
use DBI;
use Cwd 'abs_path';
use FindBin;
my $mig_bin = "$FindBin::Bin/";
use lib "$FindBin::Bin/";
use KMig;

pod2usage(-verbose => 2) if ! $ARGV[0] || $ARGV[0] eq '--help';

KMig::die_if_no_env_migschema();
KMig::die_if_mig_tracking_table_does_not_exist();

my $file = abs_path($ARGV[0]);
if ($file =~ /^$MIGBASEWORKDIR/) {
    stage_csv(@ARGV);
} else {
    print "File falls outside of MIGWORKDIR ($MIGWORKDIR): $file\n";
}

exit 0;

###############################################################################

sub stage_csv {
    my $file = abs_path(shift);
    my @args = @_;

    my $tracked_file_id = KMig::check_for_tracked_file($file);
    if ($tracked_file_id) {
        my $data = KMig::status_this_file($file);

        if (! $data->{'utf8_filename'}) {
            die "mig-iconv or mig-skip-iconv needed for UTF8 version of file: $file\n";
        }

        if (! $data->{'clean_filename'}) {
            die "mig-clean or mig-skip-clean needed for .clean version of file: $file\n";
        }

        if (! $data->{'stage_sql_filename'}) {
            die "mig-convert needed for .stage.sql version of file: $file\n";
        }

        my $stage_sql_filename = $data->{'stage_sql_filename'};
        if (! -e $stage_sql_filename) {
            die "missing file: $stage_sql_filename\n";
        }

        my $table = `grep 'CREATE TABLE' $stage_sql_filename  | cut -f3 -d\\  | head -1`;
        chomp $table;

        if (defined $data->{'staged_table'} && $data->{'staged_table'} ne $table) {
            if ($data->{staged_table} !~ '^m_') {
                die "Previously staged table $data->{staged_table} does not have a m_ prefix; afraid to drop.";
            }
            my $dbh2 = KMig::db_connect();
            print "dropping previously staged table: $data->{staged_table}\n";
            my $rv2 = $dbh2->do("
                DROP TABLE $data->{staged_table};
            ") || die "Error dropping table $data->{staged_table}: $!\n";
            print "changing references to old tables\n";
            my $rv3 = $dbh2->do("
                UPDATE m_tracked_column
                SET staged_table = " . $dbh2->quote($table) . "
                WHERE staged_table = " . $dbh2->quote($data->{staged_table}) . "
            ") || die "Error changing references to $data->{staged_table}: $!\n";
            my $rv4 = $dbh2->do("
                UPDATE m_tracked_column
                SET target_table = " . $dbh2->quote($table) . "
                WHERE target_table = " . $dbh2->quote($data->{staged_table}) . "
            ") || die "Error changing references to $data->{staged_table}: $!\n";
            KMig::db_disconnect($dbh2);
        }

        print "running staging SQL: $stage_sql_filename\n";

        system($mig_bin . 'mig-sql', @args, '-e', ("SOURCE $stage_sql_filename;"));

        if (! KMig::check_db_migschema_for_specific_table($table)) {
            die "Missing staged table: $table\n";
        } else {
            print "table staged: $table\n";
        }

        my $dbh = KMig::db_connect();
        my $rv = $dbh->do("
            UPDATE m_tracked_file
            SET staged_table = " . $dbh->quote($table) . "
            WHERE base_filename = " . $dbh->quote($file) . "
            ;
        ") || die "Error updating table m_tracked_file: $!\n";
        KMig::db_disconnect($dbh);
    } else {
        print "File not currently tracked: $file\n";
    }
}
