#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use Data::Dumper;
use Env qw(
    HOME MYSQL_HOST MYSQL_TCP_PORT MYSQL_USER MYSQL_DATABASE MYSQL_PW
        MIGSCHEMA MIGBASEWORKDIR MIGBASEGITDIR MIGGITDIR MIGWORKDIR
);
use open ':encoding(utf8)';
use Cwd 'abs_path';
use Cwd qw(getcwd);
use FindBin;
use XML::LibXML;
use open ':std', ':encoding(UTF-8)';
use Encode qw( decode_utf8 );
use List::Util qw( min max );
my $mig_bin = "$FindBin::Bin/";
use lib "$FindBin::Bin/";
use KMig;

my $dbh = KMig::db_connect();
#$dbh->{mysql_enable_utf8mb4} = 1;
$dbh->do('SET NAMES utf8mb4');

#to do check for array passed and if not present then use tags 

my @taglist = @ARGV;
my $arg_list_length = scalar @taglist;
if($arg_list_length < 1) { @taglist = ("authorisedvalues","booksellers","borrowerattributes","budgets","calendar","circrules","itemtypes","letters","libraries","patrontypes","preferences","reports","smsproviders"); } 
$MIGGITDIR =~ s/\/\//\//;

foreach my $restore (@taglist) {
    my $restorefile;
    if ($restore eq 'authorisedvalues') {
        my $timestamp = most_recent_single($MIGGITDIR,'authorisedvalues');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'authorisedvalues' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_authorisedvalues($dbh,$restorefile); }
    }
    if ($restore eq 'booksellers') {
        my $timestamp = most_recent_single($MIGGITDIR,'booksellers');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'booksellers' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_booksellers($dbh,$restorefile); }
    }
    if ($restore eq 'borrowerattributes') {
        my $timestamp = most_recent_single($MIGGITDIR,'borrowerattributes');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'borrowerattributes' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_borrowerattributes($dbh,$restorefile); }
    }
    if ($restore eq 'budgets') {
        my $timestamp = most_recent_single($MIGGITDIR,'budgets');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'budgets' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_budgets($dbh,$restorefile); }
    }
    if ($restore eq 'calendar') {
        my $timestamp = most_recent_single($MIGGITDIR,'calendar');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'calendar' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_calendar($dbh,$restorefile); }
    }
    if ($restore eq 'circrules') {
        my $timestamp = most_recent_single($MIGGITDIR,'circrules');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'circrules' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_circrules($dbh,$restorefile); }
    }
    if ($restore eq 'itemtypes') {
        my $timestamp = most_recent_single($MIGGITDIR,'itemtypes');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'itemtypes' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_itemtypes($dbh,$restorefile); }
    }
    if ($restore eq 'letters') {
        my $timestamp = most_recent_single($MIGGITDIR,'letters');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'letters' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_letters($dbh,$restorefile); }
    }
    if ($restore eq 'libraries') {
        my $timestamp = most_recent_single($MIGGITDIR,'libraries');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'libraries' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_libraries($dbh,$restorefile); }
    }
    if ($restore eq 'patrontypes') {
        my $timestamp = most_recent_single($MIGGITDIR,'patrontypes');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'patrontypes' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_patrontypes($dbh,$restorefile); }
    }
    if ($restore eq 'preferences') {
        my $timestamp = most_recent_single($MIGGITDIR,'systempreferences');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'systempreferences' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_preferences($dbh,$restorefile); }
        print "IMPORTANT : if you are changing system preferences you may need to run 'sudo systemctl restart memcached'\n\n";
    }
    if ($restore eq 'reports') {
        my $timestamp = most_recent_single($MIGGITDIR,'reports');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'reports' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_reports($dbh,$restorefile); }
    }
    if ($restore eq 'smsproviders') {
        my $timestamp = most_recent_single($MIGGITDIR,'smsproviders');
        if ($timestamp) { $restorefile = $MIGGITDIR . 'smsproviders' . '.' . $timestamp . '.xml'; }
        print "Restoring from $restorefile ... \n";
        if ($restorefile) { restore_smsproviders($dbh,$restorefile); }
    }
}

print "Done.\n";


sub most_recent_single {
    my $MGIGITDIR = shift;
    my $str = shift;
    my @files;
    my @times;
    opendir (DIR, $MIGGITDIR) or abort("could not open $MIGGITDIR");;
    while (my $file = readdir(DIR)) {
        if ($file =~ m/$str/) { push @files, $file; }
    }
    foreach my $file (@files) {
        my @f = split /\./, $file;
        push @times, $f[1];
    }
    closedir(DIR);
    my $max = max @times; 
    return $max;
}

sub restore_authorisedvalues {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM authorised_values WHERE category != 'ITEMTYPECAT'";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM authorised_value_categories WHERE category_name != 'ITEMTYPECAT'";
    $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('/document/categories/value')) {
        my $name = sql_str_not_null($node->findvalue('./name'));
        $query = "INSERT INTO authorised_value_categories (category_name) VALUES ($name)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    foreach my $node ($dom->findnodes('/document/authorisedvalues/value')) {
        my $category = sql_str($node->findvalue('./category'));
        my $authorised_value = sql_str($node->findvalue('./authorised_value'));
        my $lib = sql_str($node->findvalue('./lib'));
        my $lib_opac = sql_str($node->findvalue('./lib_opac'));
        my $imageurl = sql_str($node->findvalue('./imageurl'));
        $query = "INSERT INTO authorised_values (category,authorised_value,lib,lib_opac,imageurl) VALUES ($category,$authorised_value,$lib,$lib_opac,$imageurl)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }
    return;
}

sub restore_booksellers {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM aqbooksellers WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('/booksellers/value')) {
        my $name = sql_str($node->findvalue('./name'));
        my $address1 = sql_str($node->findvalue('./address1'));
        my $address2 = sql_str($node->findvalue('./address2'));
        my $address3 = sql_str($node->findvalue('./address3'));
        my $address4 = sql_str($node->findvalue('./address4'));
        my $phone = sql_str($node->findvalue('./phone'));
        my $accountnumber = sql_str($node->findvalue('./accountnumber'));
        my $othersupplier = sql_str($node->findvalue('./othersupplier'));
        my $currency = sql_str_not_null($node->findvalue('./currency'));
        my $booksellerfax = sql_str($node->findvalue('./booksellerfax'));
        my $notes = sql_str($node->findvalue('./notes'));
        my $bookselleremail = sql_str($node->findvalue('./bookselleremail'));
        my $booksellerurl = sql_str($node->findvalue('./booksellerurl'));
        my $postal = sql_str($node->findvalue('./postal'));
        my $url = sql_str($node->findvalue('./url'));
        my $active = sql_str($node->findvalue('./active'));
        my $listprice = sql_str($node->findvalue('./listprice'));
        my $invoiceprice  = sql_str($node->findvalue('./invoiceprice'));
        my $gstreg = sql_num($node->findvalue('./gstreg'));
        my $listincgst = sql_num($node->findvalue('./listincgst'));
        my $invoiceincgst = sql_num($node->findvalue('./invoiceincgst'));
        my $tax_rate = sql_num($node->findvalue('./tax_rate'));
        my $discount = sql_num($node->findvalue('./discount'));
        my $fax = sql_str($node->findvalue('./fax'));
        my $deliverytime = sql_num($node->findvalue('./deliverytime'));
        $query = "INSERT INTO aqbooksellers (name,address1,address2,address3,address4,phone,accountnumber,othersupplier,currency,booksellerfax,notes,bookselleremail,booksellerurl,postal,url,active,listprice,invoiceprice,gstreg,listincgst,invoiceincgst,tax_rate,discount,fax,deliverytime) VALUES ($name,$address1,$address2,$address3,$address4,$phone,$accountnumber,$othersupplier,$currency,$booksellerfax,$notes,$bookselleremail,$booksellerurl,$postal,$url,$active,$listprice,$invoiceprice,$gstreg,$listincgst,$invoiceincgst,$tax_rate,$discount,$fax,$deliverytime)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_borrowerattributes {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM authorised_values WHERE category IN (select category_code from borrower_attribute_types)";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM authorised_value_categories WHERE category_name IN (select category_name from borrower_attribute_types)";
    $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM borrower_attribute_types WHERE 1 = 1";
    $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('/borrower_attribute_types/value')) {
        my $code = sql_str($node->findvalue('./code'));
        my $description = sql_num($node->findvalue('./description'));
        my $repeatable = sql_num($node->findvalue('./repeat'));
        my $opac_display = sql_num($node->findvalue('./opac_display'));
        my $staff_searchable = sql_num($node->findvalue('./staff_searchable'));
        my $authorised_value_category = sql_str($node->findvalue('./auth_value_cat'));
        my $display_checkout = sql_num($node->findvalue('./display_checkout'));
        my $category_code = sql_str($node->findvalue('./category_code'));
        my $class = sql_str($node->findvalue('./class'));
        $query = "INSERT INTO borrower_attribute_types (code,description,repeatable,opac_display,staff_searchable,authorised_value_category,display_checkout,category_code,class) VALUES ($code,$description,$repeatable,$opac_display,$staff_searchable,$authorised_value_category,$display_checkout,$category_code,$class)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    foreach my $node ($dom->findnodes('/authorised_value_categories/value')) {
        my $category_name = sql_str($node->nodeValue);
        $query = "INSERT INTO authorised_value_categories (category_name) VALUES ($category_name)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    foreach my $node ($dom->findnodes('/authorised_values/value')) {
        my $category = sql_str($node->findvalue('./category'));
        my $authvalue = sql_str($node->findvalue('./authvalue'));
        my $lib = sql_str($node->findvalue('./lib'));
        my $lib_opac = sql_str($node->findvalue('./lib_opac'));
        my $image_url = sql_str($node->findvalue('./image_url'));
        $query = "INSERT INTO authorised_values (category,authvalue,lib,lib_opac,image_url) VALUES ($category,$authvalue,$lib,$lib_opac,$image_url)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_budgets {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM aqbudgets WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();
    
    $query = "DELETE FROM aqbudgetperiods WHERE 1 = 1";
    $sth = $dbh->prepare($query);
    $sth->execute();

    my $budget_ai;
    my $budgetperiod_ai;

    foreach my $node ($dom->findnodes('/document/budgets')) {
        $budget_ai = sql_num($node->findvalue('./autoincrement'));
    }

    foreach my $node ($dom->findnodes('/document/budgetperiods')) {
        $budgetperiod_ai = sql_num($node->findvalue('./autoincrement'));
    }

    $query = "ALTER TABLE aqbudgets AUTO_INCREMENT = $budget_ai";
    $sth = $dbh->prepare($query);
    $sth->execute();    

    $query = "ALTER TABLE aqbudgetperiods AUTO_INCREMENT = $budgetperiod_ai";
    $sth = $dbh->prepare($query);
    $sth->execute();    

    foreach my $node ($dom->findnodes('/document/budgetperiods/value')) {
        my $budget_period_id = sql_num($node->findvalue('./budget_period_id'));
        my $budget_period_startdate = sql_str($node->findvalue('./budget_period_startdate'));
        my $budget_period_enddate = sql_str($node->findvalue('./budget_period_enddate'));
        my $budget_period_active = sql_str($node->findvalue('./budget_period_active'));
        my $budget_period_description = sql_str($node->findvalue('./budget_period_description'));
        my $budget_period_total = sql_num($node->findvalue('./budget_period_total'));
        my $budget_period_locked = sql_num($node->findvalue('./budget_period_locked'));
        my $sort1_authcat = sql_str($node->findvalue('./sort1_authcat'));
        my $sort2_authcat = sql_str($node->findvalue('./sort2_authcat'));
        $query = "INSERT INTO aqbudgetperiods (budget_period_id,budget_period_startdate,budget_period_enddate,budget_period_active,budget_period_description,budget_period_total,budget_period_locked,sort1_authcat,sort2_authcat) VALUES ($budget_period_id,$budget_period_startdate,$budget_period_enddate,$budget_period_active,$budget_period_description,$budget_period_total,$budget_period_locked,$sort1_authcat,$sort2_authcat)";
        print "$query\n";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    #note that at this point we are not loading the budget owner, it's nullable and not 100% clear that it's the borrower
    #and nothing to test with in initial sample
    foreach my $node ($dom->findnodes('/document/budgets/value')) {
        my $budget_id = sql_num($node->findvalue('./budget_id'));
        my $budget_parent_id = sql_num($node->findvalue('./budget_parent_id'));
        my $budget_code = sql_str($node->findvalue('./budget_code'));
        my $budget_name = sql_str($node->findvalue('./budget_name'));
        my $budget_branchcode = sql_str_not_null($node->findvalue('./budget_branchcode'));
        my $budget_amount = sql_num($node->findvalue('./budget_amount'));
        my $budget_encumb = sql_num($node->findvalue('./budget_encumb'));
        my $budget_expend = sql_num($node->findvalue('./budget_expend'));
        my $budget_notes = sql_str_not_null($node->findvalue('./budget_notes'));
        my $timestamp = sql_str($node->findvalue('./timestamp'));
        my $budget_period_id = sql_num($node->findvalue('./budget_period_id'));
        my $sort1_authcat = sql_str_not_null($node->findvalue('./sort1_authcat'));
        my $sort2_authcat = sql_str_not_null($node->findvalue('./sort2_authcat'));
        my $budget_permission = sql_num($node->findvalue('./budget_permission'));
        $query = "INSERT INTO aqbudgets (budget_id,budget_parent_id,budget_code,budget_name,budget_branchcode,budget_amount,budget_encumb,budget_expend,budget_notes,timestamp,budget_period_id,sort1_authcat,sort2_authcat,budget_permission) VALUES ($budget_id,$budget_parent_id,$budget_code,$budget_name,$budget_branchcode,$budget_amount,$budget_encumb,$budget_expend,$budget_notes,$timestamp,$budget_period_id,$sort1_authcat,$sort2_authcat,$budget_permission)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_calendar {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM repeatable_holidays WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM special_holidays WHERE 1 = 1";
    $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('/holidays/repeatable')) {
        my $branchcode = sql_str($node->findvalue('./branchcode'));
        my $weekday = sql_num($node->findvalue('./weekday'));
        my $day = sql_num($node->findvalue('./day'));
        my $month = sql_num($node->findvalue('./month'));
        my $title = sql_str($node->findvalue('./title'));
        my $description = sql_str($node->findvalue('./description'));
        $query = "INSERT INTO repeatable_holidays (branchcode,weekday,day,month,title,description) VALUES ($branchcode,$weekday,$day,$month,$title,$description)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    foreach my $node ($dom->findnodes('/holidays/special')) {
        my $branchcode = sql_str($node->findvalue('./branchcode'));
        my $day = sql_num($node->findvalue('./day'));
        my $month = sql_num($node->findvalue('./month'));
        my $year = sql_num($node->findvalue('./year'));
        my $isexception = sql_num($node->findvalue('./isexception'));
        my $title = sql_str($node->findvalue('./title'));
        my $description = sql_str($node->findvalue('./description'));
        $query = "INSERT INTO special_holidays (branchcode,day,month,year,isexception,title,description) VALUES ($branchcode,$day,$month,$year,$isexception,$title,$description)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_circrules {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);
 
    #order of operations - clean out circ_rules, then issuingrules; restore issuingrules then circ_rules 

    my $query = "DELETE FROM circulation_rules WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM issuingrules WHERE 1 = 1";
    $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('//issuing/rule')) {
        my $categorycode = sql_str($node->findvalue('./categorycode'));
        my $itemtype = sql_str($node->findvalue('./itemtype'));
        my $restrictedtype = sql_num($node->findvalue('./restrictedtype'));
        my $rentaldiscount = sql_num($node->findvalue('./rentaldiscount'));
        my $reservecharge = sql_num($node->findvalue('./reservecharge'));
        my $fine = sql_num($node->findvalue('./fine'));
        my $finedays = sql_num($node->findvalue('./finedays'));
        my $maxsuspensiondays = sql_num($node->findvalue('./maxsuspensiondays'));
        my $suspension_chargeperiod = sql_num($node->findvalue('./suspension_chargeperiod'));
        my $firstremind = sql_num($node->findvalue('./firstremind'));
        my $chargeperiod = sql_num($node->findvalue('./chargeperiod'));
        my $chargeperiod_charge_at = sql_num($node->findvalue('./chargeperiod_charge_at'));
        my $accountsent = sql_num($node->findvalue('./accountsent'));
        my $issuelength = sql_num($node->findvalue('./issuelength'));
        my $lengthunit = sql_str($node->findvalue('./lengthunit'));
        my $hardduedate = sql_str($node->findvalue('./hardduedate'));
        my $hardduedatecompare = sql_num($node->findvalue('./hardduedatecompare'));
        my $renewalsallowed = sql_num($node->findvalue('./renewalsallowed'));
        my $renewalperiod = sql_num($node->findvalue('./renewalperiod'));
        my $norenewalbefore = sql_num($node->findvalue('./norenewalbefore'));
        my $auto_renew = sql_num($node->findvalue('./auto_renew'));
        my $no_auto_renewal_after = sql_num($node->findvalue('./no_auto_renewal_after'));
        my $no_auto_renewal_after_hard_limit = sql_str($node->findvalue('./no_auto_renewal_after_hard_limit'));
        my $reservesallowed = sql_num($node->findvalue('./reservesallowed'));
        my $holds_per_record = sql_num($node->findvalue('./holds_per_record'));
        my $holds_per_day = sql_num($node->findvalue('./holds_per_day'));
        my $branchcode = sql_str($node->findvalue('./branchcode'));
        my $overduefinescap = sql_num($node->findvalue('./overduefinescap'));
        my $cap_fine_to_replacement_price = sql_num($node->findvalue('./cap_fine_to_replacement_price'));
        my $onshelfholds = sql_num($node->findvalue('./onshelfholds'));
        my $opacitemholds = sql_str($node->findvalue('./opacitemholds'));
        my $article_requests = sql_str($node->findvalue('./article_requests'));
        my $note = sql_str($node->findvalue('./note'));
        $query = "INSERT INTO issuingrules (categorycode,itemtype,restrictedtype,rentaldiscount,reservecharge,fine,finedays,maxsuspensiondays,suspension_chargeperiod,firstremind,chargeperiod,chargeperiod_charge_at,accountsent,issuelength,lengthunit,hardduedate,hardduedatecompare,renewalsallowed,renewalperiod,norenewalbefore,auto_renew,no_auto_renewal_after,no_auto_renewal_after_hard_limit,reservesallowed,holds_per_record,holds_per_day,branchcode,overduefinescap,cap_fine_to_replacement_price,onshelfholds,opacitemholds,article_requests,note) VALUES ($categorycode,$itemtype,$restrictedtype,$rentaldiscount,$reservecharge,$fine,$finedays,$maxsuspensiondays,$suspension_chargeperiod,$firstremind,$chargeperiod,$chargeperiod_charge_at,$accountsent,$issuelength,$lengthunit,$hardduedate,$hardduedatecompare,$renewalsallowed,$renewalperiod,$norenewalbefore,$auto_renew,$no_auto_renewal_after,$no_auto_renewal_after_hard_limit,$reservesallowed,$holds_per_record,$holds_per_day,$branchcode,$overduefinescap,$cap_fine_to_replacement_price,$onshelfholds,$opacitemholds,$article_requests,$note)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    foreach my $node ($dom->findnodes('//circ/rule')) {
        my $branchcode = sql_str($node->findvalue('./branchcode'));
        my $categorycode = sql_str($node->findvalue('./categorycode'));
        my $itemtype = sql_str($node->findvalue('./itemtype'));
        my $rule_name = sql_str($node->findvalue('./rule_name'));
        my $rule_value = sql_str($node->findvalue('./rule_value'));
        $query = "INSERT INTO circulation_rules (branchcode,categorycode,itemtype,rule_name,rule_value) VALUES ($branchcode,$categorycode,$itemtype,$rule_name,$rule_value)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_itemtypes {
    my $dbh = shift;
    my $restorefile = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restorefile);

    my $query = "UPDATE itemtypes SET searchcategory = NULL";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM authorised_values WHERE category = 'ITEMTYPECAT'";
    $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM localization WHERE entity = 'itemtypes'";
    $sth = $dbh->prepare($query);
    $sth->execute();

    $query = "DELETE FROM itemtypes WHERE 1 = 1";
    $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('/document/authorised_values/value')) {
        my $category = sql_str($node->findvalue('./category'));
        my $authvalue = sql_str($node->findvalue('./authvalue'));
        my $lib = sql_str($node->findvalue('./lib'));
        my $lib_opac = sql_str($node->findvalue('./lib_opac'));
        my $image_url = sql_str($node->findvalue('./image_url'));
        my $query = "INSERT INTO authorised_values (category,authvalue,lib,lib_opac,image_url) VALUES ($category,$authvalue,$lib,$lib_opac,$image_url)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    foreach my $node ($dom->findnodes('/document/itemtypes/value')) {
        my $itemtype = sql_str($node->findvalue('./itemtype'));
        my $description = sql_str($node->findvalue('./description'));
        my $rentalcharge = sql_str($node->findvalue('./rentalcharge'));
        my $rentalcharge_daily = sql_str($node->findvalue('./rentalcharge_daily'));
        my $rentalcharge_hourly = sql_str($node->findvalue('./rentalcharge_hourly'));
        my $defaultreplacecost = sql_str($node->findvalue('./defaultreplacecost'));
        my $processfee = sql_str($node->findvalue('./processfee'));
        my $notforloan = sql_str($node->findvalue('./notforloan'));
        my $imageurl = sql_str($node->findvalue('./imageurl'));
        my $summary = sql_str($node->findvalue('./summary'));
        my $checkinmsg = sql_str($node->findvalue('./checkinmsg'));
        my $checkinmsgtype = sql_str($node->findvalue('./checkinmsgtype'));
        my $sip_media_type = sql_str($node->findvalue('./sip_media_type'));
        my $hideinopac = sql_str($node->findvalue('./hideinopac'));
        my $searchcategory = sql_str($node->findvalue('./searchcategory'));
        $query = "SELECT itemtype FROM itemtypes WHERE itemtype = $itemtype";
        $sth = $dbh->prepare($query);
        $sth->execute();
        my $answer;
        while (my @row = $sth->fetchrow_array) { $answer = sql_str($row[0]); }
        if (!defined $answer or $answer ne $itemtype) {
            $query = "INSERT INTO itemtypes (itemtype,description,rentalcharge,rentalcharge_daily,rentalcharge_hourly,defaultreplacecost,processfee,notforloan,imageurl,summary,checkinmsg,sip_media_type,hideinopac,searchcategory) 
            VALUES ($itemtype,$description,$rentalcharge,$rentalcharge_daily,$rentalcharge_hourly,$defaultreplacecost,$processfee,$notforloan,$imageurl,$summary,$checkinmsg,$sip_media_type,$hideinopac,$searchcategory)";
            $sth = $dbh->prepare($query);
            $sth->execute();
        } else {
            $query = "UPDATE itemtypes SET description = $description,rentalcharge = $rentalcharge,rentalcharge_daily = $rentalcharge_daily,rentalcharge_hourly = $rentalcharge_hourly,defaultreplacecost = $defaultreplacecost,processfee = $processfee,notforloan = $notforloan,imageurl = $imageurl,summary = $summary,checkinmsg = $checkinmsg,sip_media_type = $sip_media_type,hideinopac = $hideinopac,searchcategory = $searchcategory 
            WHERE itemtype = $itemtype";
            $sth = $dbh->prepare($query);
            $sth->execute();
        }
    }

    foreach my $node ($dom->findnodes('//localizations/value')) {
        my $entity = sql_str($node->findvalue('./entity'));
        my $code = sql_str($node->findvalue('./code'));
        my $lang = sql_str($node->findvalue('./lang'));
        my $translation = sql_str($node->findvalue('./translation'));
        my $query = "INSERT INTO localization (entity,code,lang,translation) VALUES ($entity,$code,$lang,$translation)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_letters {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM letter WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('/letters/letter')) {
        my $module = sql_str($node->findvalue('./module'));
        my $code = sql_str($node->findvalue('./code'));
        my $branchcode = sql_str_not_null($node->findvalue('./branchcode'));
        my $name = sql_str($node->findvalue('./name'));
        my $is_html = sql_num($node->findvalue('./is_html'));
        my $title = sql_str($node->findvalue('./title'));
        my $content = sql_str($node->findvalue('./content'));
        my $message_transport_type = sql_str($node->findvalue('./message_transport_type'));
        my $lang = sql_str($node->findvalue('./lang'));
        $query = "INSERT INTO letter (module,code,branchcode,name,is_html,title,content,message_transport_type,lang) VALUES ($module,$code,$branchcode,$name,$is_html,$title,$content,$message_transport_type,$lang)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }

    return;
}

sub restore_libraries {
    my $dbh = shift;
    my $restorefile = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restorefile);

    my $query = "TRUNCATE library_groups";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('//library')) {
        my $branchcode = sql_str($node->findvalue('./branchcode'));
        my $branchname = sql_str($node->findvalue('./branchname'));
        my $branchaddress1 = sql_str($node->findvalue('./branchaddress1'));
        my $branchaddress2 = sql_str($node->findvalue('./branchaddress2'));
        my $branchaddress3 = sql_str($node->findvalue('./branchaddress3'));
        my $branchzip = sql_str($node->findvalue('./branchzip'));
        my $branchcity = sql_str($node->findvalue('./branchcity'));
        my $branchstate = sql_str($node->findvalue('./branchstate'));
        my $branchcountry = sql_str($node->findvalue('./branchcountry'));
        my $branchphone = sql_str($node->findvalue('./branchphone'));
        my $branchfax = sql_str($node->findvalue('./branchfax'));
        my $branchemail = sql_str($node->findvalue('./branchemail'));
        my $branchreplyto = sql_str($node->findvalue('./branchreplyto'));
        my $branchreturnpath = sql_str($node->findvalue('./branchreturnpath'));
        my $branchurl = sql_str($node->findvalue('./branchurl'));
        my $issuing = sql_str($node->findvalue('./issuing'));
        my $branchip = sql_str($node->findvalue('./branchip'));
        my $branchprinter = sql_str($node->findvalue('./branchprinter'));
        my $branchnotes = sql_str($node->findvalue('./branchnotes'));
        my $opac_info = sql_str($node->findvalue('./opac_info'));
        my $geolocation = sql_str($node->findvalue('./geolocation'));
        my $marcorgcode = sql_str($node->findvalue('./marcorgcode'));
        my $pickup_location = $node->findvalue('./pickup_location');
        $query = "SELECT branchcode FROM branches WHERE branchcode = $branchcode";
        $sth = $dbh->prepare($query);
        $sth->execute();
        my $answer;
        while (my @row = $sth->fetchrow_array) { $answer = sql_str($row[0]); }
        if (!defined $answer or $answer ne $branchcode) { 
            $query = "INSERT INTO branches (branchcode,branchname,branchaddress1,branchaddress2,branchaddress3,branchzip,branchcity,branchstate,branchcountry,branchphone,branchfax,branchemail,branchreplyto,branchreturnpath,branchurl,issuing,branchip,branchprinter,branchnotes,opac_info,geolocation,marcorgcode,pickup_location) VALUES ($branchcode,$branchname,$branchaddress1,$branchaddress2,$branchaddress3,$branchzip,$branchcity,$branchstate,$branchcountry,$branchphone,$branchfax,$branchemail,$branchreplyto,$branchreturnpath,$branchurl,$issuing,$branchip,$branchprinter,$branchnotes,$opac_info,$geolocation,$marcorgcode,$pickup_location)";
            $sth = $dbh->prepare($query);
            $sth->execute();
        } else {
            $query = "UPDATE branches SET branchname = $branchname,branchaddress1 = $branchaddress1,branchaddress2 = $branchaddress2,branchaddress3 = $branchaddress3,branchzip = $branchzip,branchcity = $branchcity,branchstate = $branchstate,branchcountry = $branchcountry,branchphone = $branchphone,branchfax = $branchfax,branchemail = $branchemail,branchreplyto = $branchreplyto,branchreturnpath = $branchreturnpath,branchurl = $branchurl,issuing = $issuing,branchip = $branchip,branchprinter = $branchprinter,branchnotes = $branchnotes,opac_info = $opac_info,geolocation = $geolocation,marcorgcode = $marcorgcode,pickup_location = $pickup_location WHERE branchcode = $branchcode";
            $sth = $dbh->prepare($query);
            $sth->execute();  
        }
    }

    #haven't taken into account them needing to go in, in a specific order so I could check parent ids first 
    foreach my $node ($dom->findnodes('//library_group')) {
        my $id = $node->findvalue('./id');
        my $parent_id = sql_num($node->findvalue('./parent_id'));
        my $branchcode = sql_str($node->findvalue('./branchcode'));
        my $title = sql_str($node->findvalue('./title'));
        my $descr = sql_str($node->findvalue('./description'));
        my $ft1 = sql_num($node->findvalue('./ft_hide_patron_info'));
        my $ft2 = sql_num($node->findvalue('./ft_search_groups_opac'));
        my $ft3 = sql_num($node->findvalue('./ft_search_groups_staff'));
        $query = "INSERT INTO library_groups (id,parent_id,branchcode,title,description,ft_hide_patron_info,ft_search_groups_opac,ft_search_groups_staff) VALUES ($id,$parent_id,$branchcode,$title,$descr,$ft1,$ft2,$ft3)";
        $sth = $dbh->prepare($query);
	$sth->execute();
    }
    return;
}

sub restore_patrontypes {
    my $dbh = shift;
    my $restorefile = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restorefile);

    my $query;
    my $sth;

    foreach my $node ($dom->findnodes('//category')) {
        my $categorycode = sql_str($node->findvalue('./categorycode'));
        my $description = sql_str($node->findvalue('./description'));
        my $enrolmentperiod = sql_num($node->findvalue('./enrolmentperiod'));
        my $enrolmentperioddate = sql_str($node->findvalue('./enrolmentperioddate'));
        my $upperagelimit = sql_num($node->findvalue('./upperagelimit'));
        my $dateofbirthrequired = sql_num($node->findvalue('./dateofbirthrequired'));
        my $finetype = sql_str($node->findvalue('./finetype'));
        my $bulk = sql_num($node->findvalue('./bulk'));
        my $enrolmentfee = sql_num($node->findvalue('./enrolmentfee'));
        my $overduenoticerequired = sql_num($node->findvalue('./overduenoticerequired'));
        my $issuelimit = sql_num($node->findvalue('./issuelimit'));
        my $reservefee = sql_num($node->findvalue('./reservefee'));
        my $hidelostitems = sql_num($node->findvalue('./hidelostitems'));
        my $category_type = sql_str($node->findvalue('./category_type'));
        my $BlockExpiredPatronOpacActions = sql_num($node->findvalue('./BlockExpiredPatronOpacActions'));
        my $default_privacy = sql_str($node->findvalue('./default_privacy'));
        my $checkprevcheckout = sql_str($node->findvalue('./checkprevcheckout'));
        my $reset_password = sql_num($node->findvalue('./reset_password'));
        my $change_password = sql_num($node->findvalue('./change_password'));
        $query = "SELECT categorycode FROM categories WHERE categorycode = $categorycode";
        $sth = $dbh->prepare($query);
        $sth->execute();
        my $answer;
        while (my @row = $sth->fetchrow_array) { $answer = sql_str($row[0]); }
        if (!defined $answer or $answer ne $categorycode) {
            $query = "INSERT INTO categories (categorycode,description,enrolmentperiod,enrolmentperioddate,upperagelimit,dateofbirthrequired,finetype,bulk,enrolmentfee,overduenoticerequired,issuelimit,reservefee,hidelostitems,category_type,BlockExpiredPatronOpacActions,default_privacy,checkprevcheckout,reset_password,change_password) VALUES ($categorycode,$description,$enrolmentperiod,$enrolmentperioddate,$upperagelimit,$dateofbirthrequired,$finetype,$bulk,$enrolmentfee,$overduenoticerequired,$issuelimit,$reservefee,$hidelostitems,$category_type,$BlockExpiredPatronOpacActions,$default_privacy,$checkprevcheckout,$reset_password,$change_password)";
            $sth = $dbh->prepare($query);
            $sth->execute();
        } else {
            $query = "UPDATE categories SET description = $description,enrolmentperiod = $enrolmentperiod,enrolmentperioddate = $enrolmentperioddate,upperagelimit = $upperagelimit,dateofbirthrequired = $dateofbirthrequired,finetype = $finetype,bulk = $bulk,enrolmentfee = $enrolmentfee,overduenoticerequired = $overduenoticerequired,issuelimit = $issuelimit,reservefee = $reservefee,hidelostitems = $hidelostitems,category_type = $category_type,BlockExpiredPatronOpacActions = $BlockExpiredPatronOpacActions,default_privacy = $default_privacy,checkprevcheckout = $checkprevcheckout,reset_password = $reset_password,change_password = $change_password WHERE categorycode = $categorycode";
            $sth = $dbh->prepare($query);
            $sth->execute();
        }
    }
   return;
}

sub restore_preferences {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    foreach my $node ($dom->findnodes('//pref')) {
		my $variable = domain_shift(sql_str_not_null($node->findvalue('./variable')));
        my $value = domain_shift(sql_str_not_null($node->findvalue('./value')));
        my $query = "UPDATE systempreferences SET value = $value WHERE variable = $variable";
        my $sth = $dbh->prepare($query);
        $sth->execute();
    }
    return;
}

sub restore_reports {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM saved_sql WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('//sqlreport')) {
        my $date_created = sql_str($node->findvalue('./date_created'));
        my $last_modified = sql_str($node->findvalue('./last_modified'));
        my $savedsql = domain_shift(sql_str($node->findvalue('./savedsql')));
        my $report_name = sql_str($node->findvalue('./report_name'));
        my $type = sql_str($node->findvalue('./type'));
        my $notes = sql_str($node->findvalue('./notes'));
        my $cache_expiry = sql_num($node->findvalue('./cache_expiry'));
        my $public = sql_str($node->findvalue('./public'));
        my $report_area = sql_str($node->findvalue('./report_area'));
        my $report_group = sql_str($node->findvalue('./report_group'));
        my $report_subgroup = sql_str($node->findvalue('./report_subgroup'));
        my $userid = sql_str($node->findvalue('./userid'));

        $query = "SELECT borrowernumber FROM borrowers WHERE userid = $userid";
        $sth = $dbh->prepare($query);
        $sth->execute();
        my @row = $sth->fetchrow_array;
        my $borrowernumber = sql_num($row[0]);

        $query = "INSERT INTO saved_sql (date_created,last_modified,savedsql,report_name,type,notes,cache_expiry,public,report_area,report_group,report_subgroup,borrowernumber) VALUES ($date_created,$last_modified,$savedsql,$report_name,$type,$notes,$cache_expiry,$public,$report_area,$report_group,$report_subgroup,$borrowernumber)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }
    return;
}

sub restore_smsproviders {
    my $dbh = shift;
    my $restore_file = shift;
    my $parser = XML::LibXML->new();
    my $dom = $parser->parse_file($restore_file);

    my $query = "DELETE FROM sms_providers WHERE 1 = 1";
    my $sth = $dbh->prepare($query);
    $sth->execute();

    foreach my $node ($dom->findnodes('//provider')) {
        my $name = sql_str($node->findvalue('./name'));
        my $domain = sql_str($node->findvalue('./domain'));
        $query = "INSERT INTO sms_providers (name,domain) VALUES ($name,$domain)";
        $sth = $dbh->prepare($query);
        $sth->execute();
    }
    return;
}

sub domain_shift {
	my $str = shift;
	$str =~ s/-test.kohacatalog.com/.kohacatalog.com/g;
	$str =~ s/-test-staff.kohacatalog.com/-staff.kohacatalog.com/g;
	return $str;
}

sub sql_str {
    my $str = shift;
    if (!defined $str or $str eq '') { return 'NULL'; }
    $str =~ s/'/''/g;
    $str = '\'' . $str . '\'';
    return $str;
}

sub sql_str_not_null {
    my $str = shift;
    $str = sql_str($str);
    if (!defined $str or $str eq 'NULL') { return "''"; }
    return $str;
}

sub sql_num {
    my $str = shift;
    if (!defined $str or $str eq '') { return 'NULL'; } else { return $str; }
}

sub abort {
    my $msg = shift;
    print STDERR "$0: $msg", "\n";
    print_usage();
    exit 1;
}

sub print_usage {
    print <<_USAGE_;

    mig import foo_a foo_b foo_c

_USAGE_
}

