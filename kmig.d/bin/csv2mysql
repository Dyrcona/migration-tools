#!/usr/bin/perl -w
use strict;
use Switch;
use Env qw(
    HOME MYSQL_HOST MYSQL_TCP_PORT MYSQL_USER MYSQL_DATABASE MYSQL_PW
    MIGSCHEMA MIGBASEWORKDIR MIGBASEGITDIR MIGGITDIR MIGWORKDIR
);
use DBI;
use Cwd 'abs_path';
use FindBin;
my $mig_bin = "$FindBin::Bin/";
use lib "$FindBin::Bin/";
use KMig;

use Getopt::Long;
use Text::CSV::Auto;
use Data::Dumper;
use File::Basename;

my $dbh;
my $cfg;
my $csv_config;
my $help;

sub init {
    $dbh = KMig::db_connect();

	$cfg = {
		schema => 'm_foo',
		auto_options => {
		}
	};
	our %CSV_options = (
	    binary => 1,
	    auto_diag => 1,
	    diag_verbose => 1,
	);
	$cfg->{auto_options}->{csv_options} = \%CSV_options;

	GetOptions(
		'config=s' => \$csv_config,
		'no-legacy-prefix' => \($cfg->{no_legacy_prefix}),
		'use-no-headers-file' => \($cfg->{use_no_headers_file}),
		'add-x-migrate' => \($cfg->{add_x_migrate}),
        'outfile=s' => \($cfg->{outfile}),
		'schema=s' => \($cfg->{schema}),
		'parent=s' => \($cfg->{parent}),
		'help|?' => \$help
	);
	if ($help || ((@ARGV == 0) && (-t STDIN))) {
		die qq^\n\t$0 [--config <CONFIG>] [--add-x-migrate] [--no-legacy-prefix] [--schema <schema>] [--parent <base table>] [--outfile <file to create>] <"clean" file from clean_csv script>\n\n^;
	}
	if ($csv_config && ! -e $csv_config) {
		die "$csv_config does not exist\n";
	}
	if ($csv_config && -e $csv_config) {
		eval `cat $csv_config`;
	}
	if (! -e $ARGV[0]) {
		die "$ARGV[0] does not exist\n";
	}
}

sub write_sql_sample {
	my $cfg = shift;
	my $info = shift;
	my $fn = $cfg->{outfile} || $cfg->{auto_options}->{file} . '.sql';

	print "\twriting $fn\n";
	local *SQL;
	open SQL, ">$fn";
	print SQL "-- $cfg->{auto_options}->{file}\n/*\n";
	open IN, $cfg->{auto_options}->{file};
	foreach (1..5) {
		my $line = <IN>;
		print SQL $line;
	}
	close IN;
	print SQL "*/\n";
	return *SQL;
}

sub write_sql_table {
	my $sql = shift;
	my $cfg = shift;
	my $info = shift;
	my $fn = $cfg->{auto_options}->{file};
	my @indices = ();

	print "\twriting table definition\n";
    if ($cfg->{parent}) {
        if ($cfg->{parent} !~ '^m_') {
            die "parent table is not a m_ prefixed table; afraid to drop and recreate";
        }
        $cfg->{table_name} = $cfg->{parent};
	    print $sql "DROP TABLE IF EXISTS $cfg->{table_name};\n";
        my $prod_table = $cfg->{parent}; $prod_table =~ s/^m_//;
        print $sql "CREATE TABLE $cfg->{table_name} LIKE $prod_table;\n";
        print $sql "ALTER TABLE $cfg->{table_name} ADD COLUMN x_migrate BOOLEAN;\n";
    } else {
	    $cfg->{table_name} = 'm_' . lc(basename($fn)); $cfg->{table_name} =~ s/[\-\. ]/_/g;
	    print $sql "DROP TABLE IF EXISTS $cfg->{table_name};\n";
	    print $sql "CREATE TABLE $cfg->{table_name} (x_migrate BOOLEAN);\n";
    }
    push @indices, 'x_migrate';
	foreach my $column (@{ $info }) {
		my $cn = $column->{'header'};
		if ($cn =~ /^x_/) {
			push @indices, $cn;
		}
		my $col_info = Dumper($column);
		$col_info =~ s/^\$VAR1 = //;
		print $sql "ALTER TABLE $cfg->{table_name} ADD COLUMN ";
		print $sql "l_" unless $cfg->{no_legacy_prefix} or $column->{'header'} =~ /^x_/ or $column->{'header'} =~ /^l_/;
        if ($column->{'header'} eq 'x_egid' || $column->{'header'} eq 'x_hseq') {
            print $sql "$cn BIGINT; ";
        } else {
            print $sql "$cn TEXT; ";
        }
        print $sql " /*\n         $col_info   */\n";
	}
	foreach my $cn (@indices) {
		print $sql "CREATE INDEX " . $cn . "_idx ON $cfg->{table_name} ($cn);\n";
	}
}

sub write_sql_loader {
	my $sql = shift;
	my $cfg = shift;
	my $auto = shift;
	my $info = shift;
	my $fn = $cfg->{auto_options}->{file} . ($cfg->{use_no_headers_file} ? '.no_headers' : '');

	print "\twriting copy statement\n";
	print $sql "\nLOAD DATA LOCAL INFILE '$fn' INTO TABLE $cfg->{table_name} ";
    if ($auto->csv->sep_char eq chr(9) && ! defined $auto->csv->quote_char && ! defined $auto->csv->escape_char) {
        # true .tsv, don't treat as csv
    } elsif ($auto->csv->sep_char eq chr(9)) {
        # probably good enough .tsv, don't treat as csv
    } else {
        print $sql "FIELDS";
        print $sql " TERMINATED BY " . $dbh->quote( $auto->csv->sep_char ) unless $dbh->quote( $auto->csv->sep_char ) eq 'NULL';
        print $sql " OPTIONALLY ENCLOSED BY " . $dbh->quote( $auto->csv->quote_char ) unless $dbh->quote( $auto->csv->quote_char ) eq 'NULL';
        print $sql " ESCAPED BY " . $dbh->quote( $auto->csv->escape_char ) unless $dbh->quote( $auto->csv->escape_char ) eq 'NULL';
        if (!$cfg->{use_no_headers_file}) {
            print $sql " IGNORE 1 LINES "
        }
    }
    my $idx = 0;
    print $sql "(";
    foreach my $column (@{ $info }) {
        print $sql ($idx++ ? ',' : '');
        print $sql "l_" unless $cfg->{no_legacy_prefix} or $column->{'header'} =~ /^x_/ or $column->{'header'} =~ /^l_/;
        print $sql $column->{'header'};
    }
    print $sql ");\n";
}

sub main {
	init();
	foreach my $fn (@ARGV) {
		print "processing $fn\n";
		$cfg->{auto_options}->{file} = $fn;
		my $auto = Text::CSV::Auto->new($cfg->{auto_options});

		my $info = $auto->analyze();
		my $sql = write_sql_sample($cfg,$info);
		write_sql_table($sql,$cfg,$info);
		write_sql_loader($sql,$cfg,$auto,$info);
		close $sql;

		print "\tdone.\n";
	}
}

main();

