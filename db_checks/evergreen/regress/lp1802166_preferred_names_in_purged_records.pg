BEGIN;

SELECT plan(1);

SELECT CASE (
                SELECT EXISTS (
                    SELECT 1
                    FROM information_schema.columns
                    WHERE table_schema = 'actor'
                    AND   table_name = 'usr'
                    AND   column_name = 'name_keywords'
                )
            )
    WHEN FALSE THEN skip('LP#1802166: no name_keywords column; presuming DB too old to have patron preferred names', 1)
    ELSE is(
        (
            SELECT COUNT(*)
            FROM actor.usr
            WHERE usrname ~ ('^' || id || '-PURGED')
            AND NOT active
            AND deleted
            AND (
                pref_prefix IS NOT NULL OR
                pref_first_given_name IS NOT NULL OR
                pref_second_given_name IS NOT NULL OR
                pref_family_name IS NOT NULL OR
                pref_suffix IS NOT NULL OR
                name_keywords IS NOT NULL
            )
        ),
        0::BIGINT,
        'LP#1802166: all explicitly purged records have null preferred name and name keyword fields'
    )
    END
;

SELECT diag($$
If the previous test failed, there is at least one patron record
that was explicitly purged but whose preferred name and/or
name keyword fields still have non-NULL values. These can be cleared
using something like the following SQL:

UPDATE actor.usr
SET pref_prefix = NULL,
    pref_first_given_name = NULL,
    pref_second_given_name = NULL,
    pref_family_name = NULL,
    pref_suffix = NULL,
    name_keywords = NULL
WHERE usrname ~ ('^' || id || '-PURGED')
AND NOT active
AND deleted
AND (
    pref_prefix IS NOT NULL OR
    pref_first_given_name IS NOT NULL OR
    pref_second_given_name IS NOT NULL OR
    pref_family_name IS NOT NULL OR
    pref_suffix IS NOT NULL OR
    name_keywords IS NOT NULL
);
$$);

SELECT * FROM finish();
ROLLBACK;
