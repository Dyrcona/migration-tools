#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Equinox::Migration::MapDrivenMARCXMLProc;
use Equinox::Migration::MARCXMLSampler;


my $c = initialize();

# run samples if we've been asked for them
run_samples($c) if ($c->{sample} or $c->{samplemap} or $c->{samplestr});


sub run_samples {
    my ($c) = @_;
    my $s;
    if ($c->{samplemap}) {
        $s = Equinox::Migration::MARCXMLSampler->new( marcfile => $c->{marcfile},
                                                      mapfile  => $c->{samplemap});
    } elsif ($c->{samplestr}) {
        $s = Equinox::Migration::MARCXMLSampler->new( marcfile  => $c->{marcfile},
                                                      mapstring => $c->{samplestr});
    } else {
        $s = Equinox::Migration::MARCXMLSampler->new( marcfile => $c->{marcfile} );
    }
    $s->parse_records;

    dump_sample_overview($c, $s) if $c->{sample};
    dump_sample_detail($c, $s) if ($c->{samplemap} or $c->{samplestr});
}

sub dump_sample_detail {
    my ($c, $s) = @_;
    my $tags = $s->{data}{samp};
    my $count = $s->{data}{rcnt};

    open DETAIL, '>', ($c->{prefix} . "-HOLDINGS-DETAIL.txt");
    select DETAIL;
    for my $tag (sort keys %{$tags}) {
        print ">>>>> TAG $tag\n";
        for my $subkey (sort keys %{$tags->{$tag}}) {
            my $sub = $tags->{$tag}{$subkey};
            print "  Subfield: $subkey\n";
            print "  Sample:   '", $sub->{value}, "'\n";
            print "  Count:    ", $sub->{count}, " in ", $sub->{tcnt}, " tags\n\n";
            #print "(", int($sub->{count} / $sub->{rcnt}), "%)\n";
        }
    }
    select STDOUT;
    close DETAIL;
}

sub dump_sample_overview {
    my ($c, $s) = @_;
    my $tags = $s->{data}{tags};
    my $count = $s->{data}{rcnt};

    my @tagsbyname  = sort keys %{$tags};
    my @tagsbycount = reverse sort { $tags->{$a} <=> $tags->{$b} } keys %{$tags};

    open SAMPLE, '>', ($c->{prefix} . "-HOLDINGS-OVERVIEW.txt");
    select SAMPLE;
    print "FOUND TAGS (BY TAG)    FOUND TAGS (BY COUNT)\n";
    print "-------------------    ---------------------\n";
    for my $i (0 .. @tagsbyname - 1) {
        print $tagsbyname[$i], (" " x (14 - length $tags->{ $tagsbyname[$i] })),
          $tags->{ $tagsbyname[$i] }, "      ";
        print $tagsbycount[$i], (" " x (16 - length $tags->{ $tagsbycount[$i] })),
          $tags->{ $tagsbycount[$i] }, "\n";
    }
    select STDOUT;
    close SAMPLE;
}

#--------------------------

sub initialize {
    my $c = {};
    my @missing = ();

    # set mode on existing filehandles
    binmode(STDIN, ':utf8');

    my $rc = GetOptions( $c,
                         'sample|s',
                         'samplemap|sm=s',
                         'samplestr|ss=s',
                         'marcfile|m=s',
                         'ils|i=s',
                         'library|l=s',
                         'prefix|p=s',
                         'help|h',
                       );
    show_help() unless $rc;
    show_help() if ($c->{help});

    my @keys = keys %{$c};
    for my $key ('prefix', 'ils')
      { push @missing, $key unless $c->{$key} }
    if (@missing) {
        print "Required option: ", join(', ', @missing), " missing!\n";
        show_help();
    }

    return $c;
}

sub show_help {
    print <<HELP;
Usage is: extract_holdings -p PREFIX -m MAPFILE -i ILS [OPTIONS] <MARCXML>
  prefix  p  Prefix string for output filenames
  map     m  Subfield map file to use
  ils     i  Legacy ILS name (affects SQL generation)

  sample  s  Comma-delineated list of datafield tags to be sampled
  library l  Legacy library name (affects SQL generation)
HELP
    exit;
}
