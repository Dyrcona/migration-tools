#!/usr/bin/perl
# -*- coding: iso-8859-15 -*-
###############################################################################
=pod

=item B<chardet> --file foo.mrc


=back
=cut

###############################################################################

use strict;
use warnings;

no warnings 'utf8';

use Data::Dumper;
use Env qw(
    HOME PGHOST PGPORT PGUSER PGDATABASE MIGSCHEMA
    MIGBASEWORKDIR MIGBASEGITDIR MIGGITDIR MIGWORKDIR
);
use Pod::Usage;
use Switch;
use Getopt::Long;
use MARC::Batch;
use MARC::Record;
use MARC::Field;
use MARC::Charset 'marc8_to_utf8';
use Cwd 'abs_path';
use Cwd qw(getcwd);
use utf8;
use List::MoreUtils qw(uniq);
use FindBin;
my $mig_bin = "$FindBin::Bin/";
use lib "$FindBin::Bin/";
use EMig;
#use KMig;

pod2usage(-verbose => 2) if defined $ARGV[0] && $ARGV[0] eq '--help';
pod2usage(-verbose => 1) if ! $ARGV[1];

my $file;
my $debug;

my $ret = GetOptions(
    'file:s'                    => \$file,
    'debug'                     => \$debug
);

my $filetype = `file $file`;
my $batch;
if ($filetype =~ m/MARC21/) {
    $batch = MARC::Batch->new( 'USMARC', $file );
} else {
    $batch = MARC::Batch->new( 'XML', $file );
}
$batch->strict_off();

my $bad_bibs = 0;
my $record;
my $current_record = 0;
while ( eval { $record = $batch->next()} or do { if ($@) { $current_record++; $bad_bibs++; print "unreadable bib found at $current_record\n"; next; } } ) {
    my $i = 0;
    my $title_proper = $record->title_proper();
    my $author = $record->author();
    my $f_record = $record->as_formatted();
    my @f_array = split(//, $f_record);
    my $fa_length = scalar @f_array; 
    $fa_length = $fa_length--;  #to match array starting at zero 
    while ($i < $fa_length) {
        my $b_char = $f_array[$i-1];
        my $c_char = $f_array[$i];
        my $a_char = $f_array[$i+1];
        my $str;
        if ($i == 0) { $str = $c_char . $a_char; }
        if ($i == $fa_length) { $str = $b_char . $c_char; }
        if ($b_char and $c_char and $a_char) { $str = $b_char . $c_char . $a_char; } 
        my $ord_value = ord($c_char);
        if ($debug) { print "$c_char $ord_value   "; }
        my $marc8str;
        if ($ord_value == 225) { 
            $marc8str = marc8_to_utf8($str);
            print "$str ";
            print "as marc8: $marc8str \n";
        }
        $i++;
    }
}

close $file;

########### functions

sub abort {
    my $msg = shift;
    print STDERR "$0: $msg", "\n";
    exit 1;
}


