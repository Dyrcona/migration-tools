#!/usr/bin/perl
use strict;
use warnings;
use open ':utf8';

use Getopt::Long;
use MARC::Batch;
use MARC::File::XML ( BinaryEncoding => 'utf-8' );
use MARC::Field;
use Unicode::Normalize;

my $conf  = {}; # configuration hashref
my $count = 0;
my $start = time;
$| = 1;

initialize($conf);

open OF, '>', $conf->{output};
binmode(OF, ':utf8');
open XF, '>', $conf->{exception};
binmode(XF, ':utf8');

for my $file (@ARGV) {
    print XF "Processing $file\n";
    open my $records, '<:utf8', $file;
    my $batch = undef; my $record = undef;

    $batch = MARC::Batch->new('XML', $records);
    $batch->strict_off();
    $batch->warnings_off();

    while ( eval { $record = $batch->next } ) {
        my $marc = undef;
        $count++; progress_ticker();
        unless ( defined $record )
          { dump_exception($marc); next; }

        my $id = $record->field($conf->{tag});
        unless ($id) {
            print XF "ERROR: Record $count in $file is missing a ",
              $conf->{tag}, " field.\n", $record->as_formatted(), "\n=====\n";
            next;
        }

        $marc = populate_marc($record, $id);
        $marc = normalize_marc($marc);
        unless (marc_isvalid($marc))
          { dump_exception($marc); next; }
        dump_fingerprints($marc);
    }
}
print "\nProcessed $count records\n" unless $conf->{quiet};



=head2 populate_marc

Constructs a hash containing the relevant MARC data for a record and
returns a reference to it.

=cut

sub populate_marc {
    my ($record, $id) = @_;
    my %marc = (); $marc{isbns} = [];

    # id, stringified
    $marc{id} = $id->as_string($conf->{subfield});

    # record_type, bib_lvl
    $marc{record_type} = substr($record->leader, 6, 1);
    $marc{bib_lvl}     = substr($record->leader, 7, 1);

    # date1, date2
    my $my_008 = $record->field('008');
    $my_008 = $my_008->as_string() if ($my_008);
    unless (length $my_008 == 40)
      { print XF ">> Bad 008 field length in rec. $id\n"; return \%marc }
    $marc{date1} = substr($my_008,7,4) if ($my_008);
    $marc{date2} = substr($my_008,11,4) if ($my_008); # UNUSED

    # item_form
    if ( $marc{record_type} =~ /[gkroef]/ ) { # MAP, VIS
        $marc{item_form} = substr($my_008,29,1) if ($my_008);
    } else {
        $marc{item_form} = substr($my_008,23,1) if ($my_008);
    }

    # isbns
    my @isbns = $record->field('020') if $record->field('020');
    push @isbns, $record->field('024') if $record->field('024');
    for my $f ( @isbns ) {
        push @{ $marc{isbns} }, $1 if ( defined $f->subfield('a') and
                                        $f->subfield('a')=~/(\S+)/ );
    }

    # author
    for my $rec_field (100, 110, 111) {
        if ($record->field($rec_field)) {
            $marc{author} = $record->field($rec_field)->subfield('a');
            last;
        }
    }

    # "Accompanying material" (300e)
    $marc{accomp} = $record->field('300')->subfield('e')
      if $record->field('300');

    # issn, lccn, title, desc, pages, pub, pubyear, edition
    $marc{lccn} = $record->field('010')->subfield('a') if $record->field('010');
    $marc{issn} = $record->field('022')->subfield('a') if $record->field('022');
    $marc{desc} = $record->field('300')->subfield('a') if $record->field('300');
    $marc{pages} = $1 if (defined $marc{desc} and $marc{desc} =~ /(\d+)/);
    $marc{title} = $record->field('245')->subfield('a')
      if defined $record->field('245');
    $marc{edition} = $record->field('250')->subfield('a')
      if $record->field('250');
    if ($record->field('260')) {
        $marc{publisher} = $record->field('260')->subfield('b');
        $marc{pubyear} = $record->field('260')->subfield('c');
        $marc{pubyear} =
          (defined $marc{pubyear} and $marc{pubyear} =~ /(\d{4})/) ? $1 : '';
    }
    return \%marc;
}



=head2 normalize_marc

Gently massages your data.

=cut

sub normalize_marc {
    my ($marc) = @_;

    $marc->{record_type }= 'a' if ($marc->{record_type} eq ' ');
    if ($marc->{title}) {
        $marc->{title} = NFD($marc->{title});
        $marc->{title} =~ s/[\x{80}-\x{ffff}]//go;
        $marc->{title} = lc($marc->{title});
        $marc->{title} =~ s/\W+$//go;
    }
    if ($marc->{author}) {
        $marc->{author} = NFD($marc->{author});
        $marc->{author} =~ s/[\x{80}-\x{ffff}]//go;
        $marc->{author} = lc($marc->{author});
        $marc->{author} =~ s/\W+$//go;
        if ($marc->{author} =~ /^(\w+)/) {
            $marc->{author} = $1;
        }
    }
    if ($marc->{publisher}) {
        $marc->{publisher} = NFD($marc->{publisher});
        $marc->{publisher} =~ s/[\x{80}-\x{ffff}]//go;
        $marc->{publisher} = lc($marc->{publisher});
        $marc->{publisher} =~ s/\W+$//go;
        if ($marc->{publisher} =~ /^(\w+)/) {
            $marc->{publisher} = $1;
        }
    }
    return $marc;
}



=head2 marc_isvalid

Checks MARC record to see if neccessary fingerprinting data is
available

=cut

sub marc_isvalid {
    my ($marc) = @_;
    return 1 if ($marc->{item_form} and ($marc->{date1} =~ /\d{4}/) and
                 $marc->{record_type} and $marc->{bib_lvl} and $marc->{title});
    return 0;
}


=head2 dump_fingerprints

=cut

sub dump_fingerprints {
    my ($marc) = @_;

    if ($conf->{runtype} eq "primary") {
        print OF join("\t",$marc->{id}, $marc->{item_form},
                          $marc->{date1}, $marc->{record_type},
                          $marc->{bib_lvl}, $marc->{title}), "\n";
    } else {
        if ((scalar @{ $marc->{isbns} } > 0) && $marc->{pages}) {
            # case a : isbn and pages
            foreach my $isbn ( @{ $marc->{isbns}} ) {
                print OF join("\t", $marc->{id}, "case a",
                                  $marc->{item_form}, $marc->{date1},
                                  $marc->{record_type},
                                  $marc->{bib_lvl}, $marc->{title},
                                  $isbn, $marc->{pages}), "\n";
            }
        }

        if ($marc->{edition}) { # case b : edition
            print OF join("\t", $marc->{id}, "case b",
                              $marc->{item_form}, $marc->{date1},
                              $marc->{record_type}, $marc->{bib_lvl},
                              $marc->{title}, $marc->{edition}), "\n";
        }

        if ($marc->{issn}) { # case c : issn
            print OF join("\t", $marc->{id}, "case c",
                              $marc->{item_form}, $marc->{date1},
                              $marc->{record_type}, $marc->{bib_lvl},
                              $marc->{title}, $marc->{issn}), "\n";
        }

        if ($marc->{lccn}) { # case d : lccn
            print OF join("\t", $marc->{id}, "case d",
                              $marc->{item_form}, $marc->{date1},
                              $marc->{record_type}, $marc->{bib_lvl},
                              $marc->{title}, $marc->{lccn}) ,"\n";
        }

        if ($marc->{accomp}) { # case e : accomp
            print OF join("\t", $marc->{id}, "case d",
                              $marc->{item_form}, $marc->{date1},
                              $marc->{record_type}, $marc->{bib_lvl},
                              $marc->{title}, $marc->{accomp}) ,"\n";
        }

        # case z : author, publisher, pubyear, pages
        if ($marc->{author} and $marc->{publisher} and $marc->{pubyear}
            and $marc->{pages}) {
            print OF join("\t", $marc->{id}, "case e",
                              $marc->{item_form}, $marc->{date1},
                              $marc->{record_type}, $marc->{bib_lvl},
                              $marc->{title}, $marc->{author},
                              $marc->{publisher}, $marc->{pubyear},
                              $marc->{pages}), "\n";
        }
    }
}



=head2 dump_exception

Write line of exception report

=cut

sub dump_exception {
    my ($marc) = @_;
    unless (defined $marc) {
        print XF "Undefined record at line $count; likely bad XML\n";
        return;
    }
    print XF "Record ", $marc->{id}, " did not make the cut: ";
    print XF "Missing item_form. " unless ($marc->{item_form});
    print XF "Missing date1. " unless (defined $marc->{date1});
    print XF "Invalid date1: ", $marc->{date1}
      unless ($marc->{date1} =~ /\d{4}/);
    print XF "Missing record_type. " unless ($marc->{record_type});
    print XF "Missing bib_lvl. " unless ($marc->{bib_lvl});
    print XF "Missing title. " unless ($marc->{title});
    print XF "\n";
}


=head2 initialize

Performs boring script initialization. Handles argument parsing,
mostly.

=cut

sub initialize {
    my ($c) = @_;
    my @missing = ();

    # set mode on existing filehandles
    binmode(STDIN, ':utf8');

    my $rc = GetOptions( $c,
                         'exception|x=s',
                         'output|o=s',
                         'runtype|r=s',
                         'subfield|s=s',
                         'tag|t=s',
                         'quiet|q',
                         'help|h',
                       );
    show_help() unless $rc;

    my @keys = keys %{$c};
    show_help() unless (@ARGV and @keys);
    for my $key ('runtype', 'tag', 'subfield', 'output', 'exception') {
        push @missing, $key unless $c->{$key}
    }
    if (@missing) {
        print "Required option: ", join(', ', @missing), " missing!\n";
        show_help();
    }

    show_help() if ($c->{help});
}


=head2 progress_ticker

=cut

sub progress_ticker {
    return if $conf->{quiet};
    printf("> %d (%d/s)\r", $count, ((time - $start) / $count))
      if ($count % 100 == 0);
}

=head2 show_help

Display usage message when things go wrong

=cut

sub show_help {
print <<HELP;
Usage is: fingerprinter [REQUIRED ARGS] [OPTIONS] <filelist>
Req'd Arguments
  --runtype=(primary|full) -r  Do 'primary' or 'full' fingerprinting
  --tag=N                  -t  Which tag to use
  --subfield=X             -s  Which subfield to use
  --output=<file>          -o  Output filename
  --exceptions=<file>      -x  Exception report filename
Options
  --quiet  -q  Don't write status messages to STDOUT
HELP
exit 1;
}
